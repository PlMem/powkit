// Copyright (c) 2021 Electric Coin Company

package equihash

import (
	"bytes"
	"reflect"
	"testing"
)

func TestExpandArray(t *testing.T) {
	tests := []struct {
		length   uint32
		pad      uint32
		compact  []byte
		expected []byte
	}{
		{
			length: 11,
			pad:    0,
			compact: []byte{
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0xff, 0xff, 0xff,
			},
			expected: []byte{
				0x07, 0xff, 0x07, 0xff, 0x07, 0xff, 0x07, 0xff,
				0x07, 0xff, 0x07, 0xff, 0x07, 0xff, 0x07, 0xff,
			},
		},
		{
			length: 21,
			pad:    0,
			compact: []byte{
				0xaa, 0xaa, 0xad, 0x55, 0x55, 0x6a, 0xaa, 0xab,
				0x55, 0x55, 0x5a, 0xaa, 0xaa, 0xd5, 0x55, 0x56,
				0xaa, 0xaa, 0xb5, 0x55, 0x55,
			},
			expected: []byte{
				0x15, 0x55, 0x55, 0x15, 0x55, 0x55, 0x15, 0x55,
				0x55, 0x15, 0x55, 0x55, 0x15, 0x55, 0x55, 0x15,
				0x55, 0x55, 0x15, 0x55, 0x55, 0x15, 0x55, 0x55,
			},
		},
		{
			length: 21,
			pad:    0,
			compact: []byte{
				0x00, 0x02, 0x20, 0x00, 0x0a, 0x7f, 0xff, 0xfe,
				0x00, 0x12, 0x30, 0x22, 0xb3, 0x82, 0x26, 0xac,
				0x19, 0xbd, 0xf2, 0x34, 0x56,
			},
			expected: []byte{
				0x00, 0x00, 0x44, 0x00, 0x00, 0x29, 0x1f, 0xff,
				0xff, 0x00, 0x01, 0x23, 0x00, 0x45, 0x67, 0x00,
				0x89, 0xab, 0x00, 0xcd, 0xef, 0x12, 0x34, 0x56,
			},
		},
		{
			length: 14,
			pad:    0,
			compact: []byte{
				0xcc, 0xcf, 0x33, 0x3c, 0xcc, 0xf3, 0x33, 0xcc,
				0xcf, 0x33, 0x3c, 0xcc, 0xf3, 0x33, 0xcc, 0xcf,
				0x33, 0x3c, 0xcc, 0xf3, 0x33, 0xcc, 0xcf, 0x33,
				0x3c, 0xcc, 0xf3, 0x33,
			},
			expected: []byte{
				0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
				0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
				0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
				0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
			},
		},
		{
			length: 11,
			pad:    2,
			compact: []byte{
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0xff, 0xff, 0xff,
			},
			expected: []byte{
				0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x07, 0xff,
				0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x07, 0xff,
				0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x07, 0xff,
				0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x07, 0xff,
			},
		},
	}

	for i, tt := range tests {
		actual, err := expandArray(tt.compact, tt.length, tt.pad)
		if err != nil {
			t.Errorf("failed on test %d: %v", i, err)
			continue
		}

		if bytes.Compare(actual, tt.expected) != 0 {
			t.Errorf("failed on test %d: have %x want %x", i, actual, tt.expected)
			continue
		}
	}
}

func TestIndicesFromMinimal(t *testing.T) {
	tests := []struct {
		n        uint32
		k        uint32
		minimal  []byte
		expected []uint32
	}{
		{
			n: 80,
			k: 3,
			minimal: []byte{
				0x00, 0x00, 0x08, 0x00, 0x00, 0x40, 0x00, 0x02,
				0x00, 0x00, 0x10, 0x00, 0x00, 0x80, 0x00, 0x04,
				0x00, 0x00, 0x20, 0x00, 0x01,
			},
			expected: []uint32{
				1, 1, 1, 1, 1, 1, 1, 1,
			},
		},
		{
			n: 80,
			k: 3,
			minimal: []byte{
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0xff, 0xff, 0xff, 0xff, 0xff,
			},
			expected: []uint32{
				2097151, 2097151, 2097151, 2097151, 2097151, 2097151, 2097151, 2097151,
			},
		},
		{
			n: 80,
			k: 3,
			minimal: []byte{
				0x0f, 0xff, 0xf8, 0x00, 0x20, 0x03, 0xff, 0xfe,
				0x00, 0x08, 0x00, 0xff, 0xff, 0x80, 0x02, 0x00,
				0x3f, 0xff, 0xe0, 0x00, 0x80,
			},
			expected: []uint32{
				131071, 128, 131071, 128, 131071, 128, 131071, 128,
			},
		},
		{
			n: 80,
			k: 3,
			minimal: []byte{
				0x00, 0x02, 0x20, 0x00, 0x0a, 0x7f, 0xff, 0xfe,
				0x00, 0x4d, 0x10, 0x01, 0x4c, 0x80, 0x0f, 0xfc,
				0x00, 0x00, 0x2f, 0xff, 0xff,
			},
			expected: []uint32{
				68, 41, 2097151, 1233, 665, 1023, 1, 1048575,
			},
		},
	}

	for i, tt := range tests {
		actual, err := indicesFromMinimal(tt.n, tt.k, tt.minimal)
		if err != nil {
			t.Errorf("failed on test %d: %v", i, err)
			continue
		}

		if !reflect.DeepEqual(actual, tt.expected) {
			t.Errorf("failed on test %d: have %x want %x", i, actual, tt.expected)
			continue
		}
	}
}

func TestVerifyZCash(t *testing.T) {
	tests := []struct {
		header []byte
		soln   []byte
	}{
		{
			header: bytes.Join([][]byte{
				[]byte("Equihash is an asymmetric PoW based on the Generalised Birthday problem."),
				[]byte{
					1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
					0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				},
			}, nil),
			soln: []byte{
				0x04, 0x6a, 0x8e, 0xd4, 0x51, 0xa2, 0x19, 0x73,
				0x32, 0xe7, 0x1f, 0x39, 0xdb, 0x9c, 0x79, 0xfb,
				0xf9, 0x3f, 0xc1, 0x44, 0x3d, 0xa5, 0x8f, 0xb3,
				0x8d, 0x05, 0x99, 0x17, 0x21, 0x16, 0xd5, 0x55,
				0xb1, 0xb2, 0x1f, 0x32, 0x70, 0x5c, 0xe9, 0x98,
				0xf6, 0x0d, 0xa8, 0x52, 0xf7, 0x7f, 0x0e, 0x7f,
				0x4d, 0x63, 0xfc, 0x2d, 0xd2, 0x30, 0xa3, 0xd9,
				0x99, 0x53, 0xa0, 0x78, 0x7d, 0xfe, 0xfc, 0xab,
				0x34, 0x1b, 0xde, 0xc8,
			},
		},
	}

	for i, tt := range tests {
		valid, err := New(96, 5, "ZcashPoW", false).Verify(tt.header, tt.soln)
		if err != nil {
			t.Errorf("failed on %d: %v", i, err)
		} else if !valid {
			t.Errorf("failed on %d: invalid solution", i)
		}
	}
}

func TestVerifyFlux(t *testing.T) {
	tests := []struct {
		header []byte
		soln   []byte
	}{
		{
			header: []byte{
				0x04, 0x00, 0x00, 0x00, 0x38, 0x9f, 0x26, 0x6c,
				0xda, 0xbe, 0x6a, 0x7c, 0x4e, 0x10, 0x88, 0x14,
				0x77, 0x9b, 0xa1, 0x3a, 0xa0, 0x89, 0x43, 0x1f,
				0xba, 0x51, 0x49, 0xdf, 0xde, 0x20, 0x88, 0x7e,
				0x09, 0x00, 0x00, 0x00, 0x24, 0xdd, 0x82, 0xbd,
				0x2a, 0xed, 0xfd, 0xd6, 0x33, 0xc4, 0x9c, 0x12,
				0xad, 0x81, 0x44, 0xf5, 0x90, 0xa2, 0xf2, 0x3d,
				0xd0, 0x3d, 0x5f, 0x99, 0x3a, 0x70, 0xdb, 0xc6,
				0x8a, 0x92, 0x1d, 0xc2, 0xd9, 0x98, 0x8e, 0x7a,
				0xdc, 0x9c, 0x6d, 0xa1, 0x5d, 0x12, 0x24, 0x6e,
				0xeb, 0x18, 0x62, 0x3d, 0x1f, 0x80, 0x39, 0xf5,
				0xee, 0x6b, 0xca, 0xe2, 0x92, 0x61, 0xe3, 0x83,
				0x24, 0x8d, 0x75, 0x22, 0x27, 0xca, 0x98, 0x62,
				0xb2, 0xfb, 0x1a, 0x1d, 0x20, 0x00, 0xc1, 0x9a,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0xba, 0x09, 0x8e, 0x10,
			},
			soln: []byte{
				0x47, 0x72, 0x9e, 0x61, 0x2e, 0xd3, 0xc5, 0xc2,
				0xde, 0xc2, 0x67, 0x30, 0xdb, 0x48, 0x6d, 0x5e,
				0x7d, 0x78, 0xd1, 0x3b, 0x07, 0x35, 0xb2, 0xcd,
				0xdb, 0x54, 0x61, 0x9f, 0x6f, 0x31, 0xa6, 0x46,
				0x17, 0x8f, 0xb3, 0x5f, 0x3f, 0x84, 0x63, 0x6c,
				0x54, 0x90, 0xed, 0xd4, 0xf6, 0xf9, 0xa5, 0x01,
				0x0f, 0x2a, 0xaa, 0xc8,
			},
		},
	}

	for i, tt := range tests {
		valid, err := NewFlux().Verify(tt.header, tt.soln)
		if err != nil {
			t.Errorf("failed on %d: %v", i, err)
		} else if !valid {
			t.Errorf("failed on %d: invalid solution", i)
		}
	}
}
